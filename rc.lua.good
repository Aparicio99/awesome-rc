require("awful")
require("awful.autofocus")
require("awful.rules")
require("beautiful")
require("naughty")

config = awful.util.getdir("config")
beautiful.init(config .. "/themes/default/theme.lua")

spawn = awful.util.spawn
pread = awful.util.pread
Win = "Mod4"
Alt = "Mod1"
Ctr = "Control"
Shi = "Shift"
terminal = "/home/aparicio/scripts/uterm"
browser = "luakit"

dofile(config .. "/helpers.lua")

--------------------------------------- Layout ---------------------------------------
layouts = {
	awful.layout.suit.floating,
	awful.layout.suit.tile,
	awful.layout.suit.tile.left,
	awful.layout.suit.tile.bottom,
	awful.layout.suit.tile.top,
	awful.layout.suit.fair,
	awful.layout.suit.fair.horizontal,
	awful.layout.suit.spiral,
	awful.layout.suit.spiral.dwindle,
	awful.layout.suit.max,
	awful.layout.suit.max.fullscreen,
	awful.layout.suit.magnifier
}

-- Define a tag table which hold all screen tags.
if screen.count() == 2 then MAIN = 2 else MAIN = 1 end

naughty.config.default_preset = {
	screen = MAIN,
	font = 'Monospace 8'
}

tags = {}
for s = 1, screen.count() do
	tags[s] = awful.tag({ 1, 2, 3, 4 }, s, awful.layout.suit.tile)
end

awful.tag.setproperty(tags[1][2], "layout", awful.layout.suit.max)
awful.tag.setproperty(tags[MAIN][1], "mwfact", 0.75)

--------------------------------------- Menu ---------------------------------------

appsmenu = {
	{ "Mathematica",	"mathematica" },
	{ "Boinc",		"boincmgr" },
	{ "DrScheme",		"drscheme" }
}
internetmenu = {
	{ "Emesene",		"emesene"},
	{ "Transmission",	"transmission-gtk"},
	{ "Uzbl",		"uzbl-browser"},
	{ "Midori",		"midori"},
	{ "Google Earth",	"googleearth"},
	{ "Wicd-client",	"wicd-client"},
	{ "Dropbox",		"/home/aparicio/.dropbox-dist/dropboxd"},
}
multimediamenu = {
	{ "GPicView",		"gpicview" },
	{ "Mirage",		"mirage" },
	{ "Gimp",		"gimp" },
	{ "ePDFViwer",		"epdfview" },
	{ "Gmpc",		"gmpc" },
	{ "Gnome Mplayer",	"gnome-mplayer" },
	{ "Audacity",		"audacity" },
	{ "ncmpc",		t("ncmpc") },
}
gamesmenu = {
	{ "AssaultCube",	"assaultcube" },
	{ "FooBillard",		"foobillard" },
	{ "FretsOnFire",	"FretsOnFire" },
	{ "SuperTuxKart",	"supertuxkart" },
	{ "Xmoto",		"xmoto" },
	{ "GL-117",		"gl-117" },
	{ "TeeWorlds",		"teeworlds" },
	{ "Chickens",		"chickens --window" },
	{ "CrashTest",		"crashtext" },
}
officemenu = {
	{ "Gnumeric",		"gnumeric" },
	{ "Abiword",		"abiword" },
	{ "ooWriter",		"oowriter" },
	{ "ooCalc",		"oocalc" },
	{ "ooImpress",		"ooimpress" },
}
utilsmenu = {
	{ "Leafpad",		"leafpad" },
	{ "Character Map",	"gucharmap" },
	{ "Xkill",		"xkill" },
	{ "LXappearance",	"lxappearance" },
	{ "urxvt",		terminal },
	{ "htop",		t("htop") },
	{ "root shell",		t("su") },
	{ "conky",		t("conky") },
}
awesomemenu = {
	{ "restart", awesome.restart },
	{ "quit", awesome.quit }
}
mymainmenu = awful.menu({ items = {
			{ "Skype",	"skype"},
			{ "Gmpc",	"gmpc"},
			{ "internet",	internetmenu },
			{ "apps",	appsmenu },
			{ "multimedia",	multimediamenu },
			{ "games",	gamesmenu },
			{ "office",	officemenu },
			{ "utils",	utilsmenu },
			{ "awesome",	awesomemenu }
}})


--------------------------------------- Widgets ---------------------------------------
openbrowser = widget({type = "textbox"})
mysystray = widget({ type = "systray" })
--volicon = widget({ type = "imagebox" })
volicon = widget({ type = "textbox" })
battery = widget({type = "textbox"})
clock = widget({type = "textbox"})

--------------------------------------- Browser Menu ---------------------------------------
browsermenu = awful.menu({ items = {
			{ "GMail",	lspawn(browser.." gmail.com") },
			{ "Facebook",	lspawn(browser.." facebook.com") },
			{ "Reddit",	lspawn(browser.." reddit.com") },
}})

openbrowser.text = "+ "
openbrowser:buttons(awful.util.table.join(
				awful.button({ }, 1, lspawn(browser)),
				awful.button({ }, 3, function() browsermenu:toggle()  end, nil, "weeeeeeeeee")))

--------------------------------------- Panel ---------------------------------------

-- Tag mouse actions
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
			awful.button({     }, 1, awful.tag.viewonly),
			awful.button({ Win }, 1, awful.client.movetotag),
			awful.button({     }, 3, awful.tag.viewtoggle),
			awful.button({ Win }, 3, awful.client.toggletag),
			awful.button({     }, 4, awful.tag.viewnext),
			awful.button({     }, 5, awful.tag.viewprev))

-- Task mouse actions
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
			awful.button({ }, 1,
					function (c)
						if not c:isvisible() then
							awful.tag.viewonly(c:tags()[1])
						end
						client.focus = c
						c:raise()
					end),
			awful.button({ }, 2, function (c) c:kill() end),
			awful.button({ }, 3, function (c) c.minimized = not c.minimized end),
			awful.button({ }, 4,
					function ()
						awful.client.focus.byidx(1)
						if client.focus then client.focus:raise() end
					end),
			awful.button({ }, 5,
					function ()
						awful.client.focus.byidx(-1)
						if client.focus then client.focus:raise() end
					end))

mywibox = {}
mypromptbox = {}
mylayoutbox = {}
for s = 1, screen.count() do
	-- Run Prompt
	mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })

	-- Layout box
	mylayoutbox[s] = awful.widget.layoutbox(s)
	mylayoutbox[s]:buttons(awful.util.table.join(
				awful.button({ }, 1, function () mymainmenu:toggle() end),
				awful.button({ }, 2, function () awful.layout.set(awful.layout.suit.floating) end),
				awful.button({ }, 3, function () awful.layout.set(awful.layout.suit.tile) end),
				awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
				awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
	-- Tag list
	mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

	-- Task list
	mytasklist[s] = awful.widget.tasklist( function(c) return awful.widget.tasklist.label.currenttags(c, s) end, mytasklist.buttons)

	-- Panel
	mywibox[s] = awful.wibox({ position = "top", screen = s, ontop = false })
	mywibox[s].widgets = {
		{
			mylayoutbox[s],
			mytaglist[s],
			s == 1 and openbrowser or nil,
			mypromptbox[s],
			layout = awful.widget.layout.horizontal.leftright
		},
		clock,
		s == MAIN and volicon or nil,
		s == MAIN and battery or nil,
		s == MAIN and mysystray or nil,
		mytasklist[s],
		layout = awful.widget.layout.horizontal.rightleft
	}
end

--------------------------------------- Mouse Bindings ---------------------------------------
root.buttons(awful.util.table.join(
			awful.button({     }, 3, function(c) mymainmenu:toggle() end),
			awful.button({     }, 4, awful.tag.viewnext),
			awful.button({     }, 5, awful.tag.viewprev),
			awful.button({ Win }, 4, awful.tag.viewnext),
			awful.button({ Win }, 5, awful.tag.viewprev)
			))

--------------------------------------- Global Key Bindings ---------------------------------------
globalkeys = awful.util.table.join(
		-- Generic
		awful.key({ Win,     }, "Menu",  function () mymainmenu:toggle() end),
		awful.key({ Win, Alt }, "Menu",  function () awful.menu.clients({keygrabber=true}) end),
		awful.key({ Win, Ctr }, "r",     awesome.restart),
		awful.key({ Win, Ctr }, "q",	 awesome.quit),

		-- Tag navegation
		awful.key({ Win,     }, "Left",  awful.tag.viewprev ),
		awful.key({ Win,     }, "Right", awful.tag.viewnext ),
		awful.key({ Win,     }, "\\",    awful.tag.history.restore ),
		awful.key({ Win,     }, "Tab",   awful.tag.viewnext ),
		awful.key({ Win, Shi }, "Tab",   awful.tag.viewprev ),
		awful.key({ Win,     }, "Up",    function () awful.screen.focus_relative( 1) end),
		awful.key({ Win,     }, "Down",  function () awful.screen.focus_relative(-1) end),
		awful.key({ Win,     }, "<",     function () awful.screen.focus_relative( 1) end),
		awful.key({ Win, Shi }, "<",     function () awful.screen.focus_relative(-1) end),

		-- Layout navegation
		awful.key({ Win,     }, "u",     awful.client.urgent.jumpto ),
		awful.key({ Alt      }, "\\",
						function ()
							awful.client.focus.history.previous()
							if client.focus then client.focus:raise() end
						end),
		awful.key({ Alt      }, "Tab",
						function ()
							awful.client.focus.byidx(1)
							if client.focus then client.focus:raise() end
						end),
		awful.key({ Alt, Shi }, "Tab",
						function ()
							awful.client.focus.byidx(-1)
							if client.focus then client.focus:raise() end
						end),

		-- Layout manipulation
		awful.key({ Win, Alt }, "Left",  function() awful.tag.incnmaster( 1)    info() end),
		awful.key({ Win, Alt }, "Right", function() awful.tag.incnmaster(-1)    info() end),
		awful.key({ Win, Alt }, "Up",    function() awful.client.swap.byidx( 1) info() end),
		awful.key({ Win, Alt }, "Down",  function() awful.client.swap.byidx(-1) info() end),
		awful.key({ Win, Ctr }, "Left",  function() awful.tag.incmwfact(-0.05)  info() end),
		awful.key({ Win, Ctr }, "Right", function() awful.tag.incmwfact( 0.05)  info() end),
		awful.key({ Win, Shi }, "0",     function() awful.tag.setmwfact(0.5)    info() end),
		awful.key({ Win, Ctr }, "Up",    function() awful.tag.incncol( 1)       info() end),
		awful.key({ Win, Ctr }, "Down",  function() awful.tag.incncol(-1)       info() end),
		awful.key({ Win,     }, "space", function() awful.layout.inc(layouts,  1) info() end),
		awful.key({ Win, Shi }, "space", function() awful.layout.inc(layouts, -1) info() end),

		-- Apps
		awful.key({ Win }, "Return",               lspawn(terminal)),
		awful.key({ Win, Alt }, "Return",          lspawn(terminal.." -e su")),
		awful.key({     }, "Print",                lspawn("/home/aparicio/scripts/screenshot scr")),
		awful.key({ Ctr }, "Print",                lspawn("/home/aparicio/scripts/screenshot area")),
		awful.key({     }, "XF86WWW",              lspawn("firefox")),
		awful.key({     }, "XF86Display",          lspawn("xset dpms force off")),
		awful.key({     }, "XF86AudioMute",        function() togglemute() end),
		awful.key({     }, "XF86AudioRaiseVolume", function() volume("1+") end),
		awful.key({     }, "XF86AudioLowerVolume", function() volume("1-") end),
		awful.key({     }, "XF86AudioPlay",	   function() volcheck() spawn_out("mpc toggle", 2) end),
		awful.key({     }, "XF86AudioStop",        function() spawn_out("mpc stop", 2) end),
		awful.key({     }, "XF86AudioPrev",        function() spawn_out("mpc prev", 2) end),
		awful.key({     }, "XF86AudioNext",        function() spawn_out("mpc next", 2) end),
		awful.key({     }, "XF86MonBrightnessUp",  lspawn("xbacklight +10")),
		awful.key({     }, "XF86MonBrightnessDown",lspawn("xbacklight -10")),
		awful.key({ Win }, "F1",                   function() dropdown[0] = 1 spawndrop(client.focus)  end),
		awful.key({ Win }, "F2",                   function() dropdown[0] = 2 spawndrop(client.focus)  end),
		awful.key({ Win }, "F3",                   function() dropdown_onoff() end),
		awful.key({ Alt }, "F2",		   function() dmenu() end),

		-- Prompts
		awful.key({ Win      }, "r",	function () mypromptbox[mouse.screen]:run() end ),
		awful.key({ Win      }, "x",	mkprompt("Lua: ",  awful.util.eval, awful.util.getdir("cache") .. "/history_eval") ),
		awful.key({ Win      }, "F11",	mkprompt("Calc: ", function (expr) out("= " .. awful.util.eval("return (" .. expr .. ")")) end ) ),
		awful.key({ Win      }, "b",	mkprompt("Open: ", function (expr) spawn(browser.." "..expr) end) ),
		awful.key({ Win      }, "k",	mkprompt("Wiki: ", function (expr) spawn(browser.." http://en.wikipedia.org/w/index.php?title=Special:Search&search="..expr.."&go=Go") end) )
)

--------------------------------------- Client key bindings ---------------------------------------
clientkeys = awful.util.table.join(
		awful.key({ Alt      }, "F4",     function (c) c:kill() end),
		awful.key({ Win,     }, "f",      function (c) c.fullscreen = not c.fullscreen end),
		awful.key({ Win, Alt }, "space",  awful.client.floating.toggle ),
		awful.key({ Win, Alt }, "Return", function (c) c:swap(awful.client.getmaster()) end),
		awful.key({ Win,     }, "o",      awful.client.movetoscreen ),
		awful.key({ Win, Alt }, "r",      function (c) c:redraw() end),
		awful.key({ Win,     }, "t",      function (c) c.ontop = not c.ontop end),
		awful.key({ Win,     }, "n",      function (c) c.minimized = not c.minimized end),
		awful.key({ Win, Shi }, "Right",  shift_to_tag(1)),
		awful.key({ Win, Shi }, "Left",   shift_to_tag(-1)),
		awful.key({ Win,     }, "i",      client_info),
		awful.key({ Win,     }, "m",	  function (c)
							c.maximized_horizontal = not c.maximized_horizontal
							c.maximized_vertical   = not c.maximized_vertical
						  end)
)

--------------------------------------- Numeric Tag Switching ---------------------------------------
for i = 1, 4 do
	globalkeys = awful.util.table.join(globalkeys,
		awful.key({ Win },      "#"..i+9, function () awful.tag.viewonly(tags[mouse.screen][i]) end),
		awful.key({ Win, Ctr }, "#"..i+9, function () awful.tag.viewtoggle(tags[mouse.screen][i]) end),
		awful.key({ Win, Shi }, "#"..i+9, function () awful.client.movetotag(tags[client.focus.screen][i]) end),
		awful.key({ Win, Alt }, "#"..i+9, function () awful.client.toggletag(tags[client.focus.screen][i]) end))
end

--------------------------------------- Dynamic key bindings ---------------------------------------
globalkeys = awful.util.table.join(globalkeys,
	awful.key({ }, "F1", function () dropdown_toggle(1) end),
	awful.key({ }, "F2", function () dropdown_toggle(2) end))

root.keys(globalkeys)

--------------------------------------- Client mouse actions ---------------------------------------
clientbuttons = awful.util.table.join(
		awful.button({     }, 1, function (c) client.focus = c; c:raise() end),
		awful.button({ Win }, 1, awful.mouse.client.move),
		awful.button({ Win }, 2, function (c) c:kill() end),
		awful.button({ Win }, 3, awful.mouse.client.resize),
		awful.button({ Win }, 4, awful.tag.viewnext),
		awful.button({ Win }, 5, awful.tag.viewprev))

--------------------------------------- Rules ---------------------------------------
awful.rules.rules = {
	-- All clients will match this rule.
	{ rule = { }, properties = {	border_width = beautiful.border_width,
					border_color = beautiful.border_normal,
					focus = true,
					keys = clientkeys,
					buttons = clientbuttons,
					size_hints_honor = false} },

	{ rule_any = {	class = { "MPlayer", "gimp", "Gmpc", "Transmission", "Gsimplecal" },
			name = { "File Transfers", "cal" }
		}, properties = { floating = true } },

	{ rule = { class = browser },	properties = { tag = tags[1][2] } },
	{ rule = { class = "Skype" },	properties = { tag = tags[MAIN][1] } },
	{ rule = { name = "dropterm1" }, properties = { floating = true, ontop = true, skip_taskbar = true, sticky = true },
					callback = function(c)
						screengeom = screen[mouse.screen].workarea
						c:geometry({
							width = 800, height = 300,
							x = screengeom.x + (screengeom.width - c:geometry().width)/2,
							y = screengeom.y
						})
					end },
	{ rule = { name = "dropterm2" }, properties = { floating = true, ontop = true, skip_taskbar = true, sticky = true },
					callback = function(c)
						screengeom = screen[mouse.screen].workarea
						c:geometry({
							width = 800, height = 300,
							x = screengeom.x + (screengeom.width - c:geometry().width)/2,
							y =  screengeom.y + screengeom.height - c:geometry().height
						})
					end },

}

--------------------------------------- Signals ---------------------------------------
client.add_signal("manage",
	function (c, startup)
		if not startup then
			-- Put windows in a smart way, only if they does not set an initial position.
			if not c.size_hints.user_position and not c.size_hints.program_position then
				awful.placement.no_overlap(c)
				awful.placement.no_offscreen(c)
				end
			end
end )

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

--------------------------------------- Includes ---------------------------------------
dofile(config .. "/clock.lua")
dofile(config .. "/volume.lua")
dofile(config .. "/battery.lua")
dofile(config .. "/dropdown.lua")
