require("awful")
require("awful.autofocus")
require("awful.rules")
require("beautiful")
require("naughty")
--require("vicious")

beautiful.init(awful.util.getdir("config") .. "/themes/default/theme.lua")

terminal = "/home/aparicio/scripts/uterm"
Win = "Mod4"
Alt = "Mod1"
Ctr = "Control"
Shi = "Shift"

function out(s, t)
	if t then
		naughty.notify({ text=s, screen=screen.count(), timeout=t })
	else
		naughty.notify({ text=s, screen=screen.count() })
	end
end

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts = {
	awful.layout.suit.floating,
	awful.layout.suit.tile,
	awful.layout.suit.tile.left,
	awful.layout.suit.tile.bottom,
	awful.layout.suit.tile.top,
	awful.layout.suit.fair,
	awful.layout.suit.fair.horizontal,
	awful.layout.suit.spiral,
	awful.layout.suit.spiral.dwindle,
	awful.layout.suit.max,
	awful.layout.suit.max.fullscreen,
	awful.layout.suit.magnifier
}

-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
	if s == 1 then
		tags[s] = awful.tag({ 1, 2, 3, 4 }, s, layouts[2])
	else
		tags[s] = awful.tag({ 1, 2, 3, 4 }, s, layouts[2])
	end
end

awful.tag.setproperty(tags[1][2], "layout", awful.layout.suit.max)

--------------------------------------- Menu --------------------------------------- 
function t(s) return terminal.." -e "..s end 

appsmenu = {
	{ "Zim",		"zim" },
	{ "Mathematica",	"mathematica" },
	{ "Boinc",		"boincmgr" },
	{ "DrScheme",		"drscheme" }
}
internetmenu = {
	{ "Firefox",		"firefox" },
	{ "Skype",		"skype"},
	{ "Emesene",		"emesene"},
	{ "Transmission",	"transmission"},
	{ "Uzbl",		"uzbl-browser"},
	{ "Midori",		"midori"},
	{ "Google Earth",	"googleearth"},
	{ "Wicd-client",	"wicd-client"},
	{ "Dropbox",		"/home/aparicio/.dropbox-dist/dropboxd"},
}
multimediamenu = {
	{ "GPicView",		"gpicview" },
	{ "Mirage",		"mirage" },
	{ "Gimp",		"gimp" },
	{ "ePDFViwer",		"epdfview" },
	{ "Gmpc",		"gmpc" },
	{ "Gnome Mplayer",	"gnome-mplayer" },
	{ "Audacity",		"audacity" },
	{ "ncmpc",		t("ncmpc") },
}
gamesmenu = {
	{ "AssaultCube",	"assaultcube" },
	{ "FooBillard",		"foobillard" },
	{ "FretsOnFire",	"FretsOnFire" },
	{ "SuperTuxKart",	"supertuxkart" },
	{ "Xmoto",		"xmoto" },
	{ "GL-117",		"gl-117" },
	{ "TeeWorlds",		"teeworlds" },
	{ "Chickens",		"chickens --window" },
}
officemenu = {
	{ "Gnumeric",		"gnumeric" },
	{ "Abiword",		"abiword" },
	{ "ooWriter",		"oowriter" },
	{ "ooCalc",		"oocalc" },
	{ "ooImpress",		"ooimpress" },
}
utilsmenu = {
	{ "Leafpad",		"leafpad" },
	{ "Character Map",	"gucharmap" },
	{ "Xkill",		"xkill" },
	{ "LXappearance",	"lxappearance" },
	{ "urxvt",		terminal },
	{ "htop",		t("htop") },
	{ "root shell",		t("su") },
}
awesomemenu = {
	{ "restart", awesome.restart },
	{ "quit", awesome.quit }
}
mymainmenu = awful.menu({ items = {
			{ "apps", appsmenu },
			{ "internet", internetmenu },
			{ "multimedia", multimediamenu },
			{ "games", gamesmenu },
			{ "office", officemenu },
			{ "utils", utilsmenu },
			{ "awesome", awesomemenu }
}})

--------------------------------------- Clock --------------------------------------- 
format = " %a %b %d %H:%M "
clocklong = false

clock = widget({type = "textbox"})
clock.text = os.date(format)

clock:buttons(awful.util.table.join(
				awful.button({ }, 1, function() toggleclock(1) end),
				awful.button({ }, 2, function() toggleclock(2) end),
				awful.button({ }, 3, function() awful.util.spawn("gsimplecal") end)
))

clocktimer = timer({timeout = 60})
clocktimer:add_signal("timeout", function() clock.text = os.date(format) batreload() end)
clocktimer:start()

superclocktimer = timer({timeout = 1})
superclocktimer:add_signal("timeout", function() clock.text = os.date(longformat) end)

function toggleclock(n)
	if n == 1 then longformat = " %d/%m/%y %H:%M:%S " else longformat = " %s " end

	if clocklong then
		superclocktimer:stop()
		clock.text = os.date(format)
		clocktimer:start()
	else
		clocktimer:stop()
		clock.text = os.date(longformat)
		superclocktimer:start()
	end
	clocklong = not clocklong
end

--------------------------------------- Volume Control --------------------------------------- 
normalize_volume = true
amixer_s = "amixer get Master | grep -m1 %"
state_s = "amixer get Master | grep -m1 % | sed 's/.*\\[\\(.*\\)\].*/\\1/'"
vol_image = image(awful.util.getdir("config") .. "/themes/vol.png")
volm_image = image(awful.util.getdir("config") .. "/themes/volm.png")

function togglemute()
	awful.util.spawn("amixer set Master toggle")
	local state = awful.util.pread(state_s)
	if state == "on\n" then
		out("Mute OFF", 2)
		volicon.image = vol_image 
	else
		out("Mute ON", 2)
		volicon.image = volm_image
	end
end

function normalvolume()
	normalize_volume = not normalize_volume
	if normalize_volume then
		out("Volume normalization ON", 1)
	else
		out("Volume normalization OFF", 1)
	end
end

function volume(s)
	awful.util.spawn("amixer set Master "..s)
end

volicon = widget({ type = "imagebox" })
volicon.image = image(awful.util.getdir("config") .. "/themes/vol.png")
volicon:buttons(awful.util.table.join(
				awful.button({ }, 1, function() if normalize_volume then volume("50%") else volume("100%") end end),
				awful.button({ }, 2, function() togglemute() end),
				awful.button({ }, 3, function()	normalvolume() end),
				awful.button({ }, 4, function() volume("1+") end),
				awful.button({ }, 5, function() volume("1-") end)
))

voltip = awful.tooltip({ objects = {volicon}, timer_function = function() return awful.util.pread(amixer_s) end })

--------------------------------------- Battery --------------------------------------- 
--[[batpath = "/sys/class/power_supply/BAT0/"
battery = widget({type = "textbox"})
batnum = false
battery:buttons(awful.util.table.join(
				awful.button({ }, 1, function() batnum = not batnum batreload() end),
				awful.button({ }, 2, function() batreload() end),
				awful.button({ }, 3, function() out(io.open(batpath.."uevent"):read("*all")) end)
))

function batnotify()
		local chargenow = io.open(batpath.."charge_now"):read("*number")
		local chargefull = io.open(batpath.."charge_full"):read("*number")
		local state = chargenow/chargefull * 100

		out(chargenow.."/"..chargefull)
end

function batreload()
	local statusfile = io.open(batpath.."status")
	if statusfile then
		local status = statusfile:read("*all")
		if status == "Full\n" then battery.text = "" return end

		local chargenow = io.open(batpath.."charge_now"):read("*number")
		local chargefull = io.open(batpath.."charge_full"):read("*number")
		local state = math.floor(chargenow/chargefull * 100 + 0.5)

		if batnum then battery.text = " Bat: "..chargenow.."/"..chargefull.." "..state.."%"
		else battery.text = " Bat: "..state.."%" end

		if state < 20.0 then out("Battery low") end
		chargenow:close()
		chargefull:close()
		state:close()
	else
		battery.text = " Battery offline"
	end

	statusfile:close()
end

batreload()
]]
--------------------------------------- Uzbl stuff --------------------------------------- 
function ontop_manage(c)
	c:raise()
	client.focus = c
	client.remove_signal("manage", ontop_manage)
end

function spawn_ontop(s)
	client.add_signal("manage", ontop_manage)
	awful.util.spawn(s)
end

uzblmenu = awful.menu({ items = {
			{ "GMail", 	function() spawn_ontop("uzbl-browser gmail.com") end },
			{ "Facebook", 	function() spawn_ontop("uzbl-browser facebook.com") end },
}})

newtab = widget({type = "textbox"})
newtab.text = "+ "
newtab:buttons(awful.util.table.join(
				awful.button({ }, 1, function() spawn_ontop("uzbl-browser")  end),
				awful.button({ }, 3, function() uzblmenu:toggle()  end)
))

--------------------------------------- Panel --------------------------------------- 

-- Systray
mysystray = widget({ type = "systray" })

-- Tag mouse actions
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
			awful.button({     }, 1, awful.tag.viewonly),
			awful.button({ Win }, 1, awful.client.movetotag),
			awful.button({     }, 3, awful.tag.viewtoggle),
			awful.button({ Win }, 3, awful.client.toggletag),
			awful.button({     }, 4, awful.tag.viewnext),
			awful.button({     }, 5, awful.tag.viewprev))

-- Task mouse actions
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
			awful.button({ }, 1,
					function (c)
						if not c:isvisible() then
							awful.tag.viewonly(c:tags()[1])
						end
						client.focus = c
						c:raise()
					end),
			awful.button({ }, 2, function (c) c:kill() end),
			awful.button({ }, 3, function (c) c.minimized = not c.minimized end),
			awful.button({ }, 4,
					function ()
						awful.client.focus.byidx(1)
						if client.focus then client.focus:raise() end
					end),
			awful.button({ }, 5,
					function ()
						awful.client.focus.byidx(-1)
						if client.focus then client.focus:raise() end
					end))

mywibox = {}
mypromptbox = {}
mylayoutbox = {}
for s = 1, screen.count() do
	-- Run Prompt
	mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })

	-- Layout box
	mylayoutbox[s] = awful.widget.layoutbox(s)
	mylayoutbox[s]:buttons(awful.util.table.join(
				awful.button({ }, 1, function () mymainmenu:toggle() end),
				awful.button({ }, 2, function () awful.layout.set(awful.layout.suit.floating) end),
				awful.button({ }, 3, function () awful.layout.set(awful.layout.suit.tile) end),
				awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
				awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
	-- Tag list
	mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

	-- Task list
	mytasklist[s] = awful.widget.tasklist(
					function(c)
						return awful.widget.tasklist.label.currenttags(c, s)
					end,
					mytasklist.buttons)

	-- Panel
	mywibox[s] = awful.wibox({ position = "top", screen = s, ontop = false })
	mywibox[s].widgets = {
		{
			mylayoutbox[s],
			mytaglist[s],
			s == 1 and newtab or nil,
			mypromptbox[s],
			layout = awful.widget.layout.horizontal.leftright
		},
		clock,
		s == screen.count() and volicon or nil,
		--battery,
		s == screen.count() and mysystray or nil,
		mytasklist[s],
		layout = awful.widget.layout.horizontal.rightleft
	}
end

--------------------------------------- Mouse Bindings --------------------------------------- 
root.buttons(awful.util.table.join(
			awful.button({     }, 3, function(c) mymainmenu:toggle() end),
			awful.button({     }, 4, awful.tag.viewnext),
			awful.button({     }, 5, awful.tag.viewprev),
			awful.button({ Win }, 4, awful.tag.viewnext),
			awful.button({ Win }, 5, awful.tag.viewprev)
			))

--------------------------------------- Global Key Bindings --------------------------------------- 
function mkprompt(p, f, c)
	return function () awful.prompt.run({ prompt = p }, mypromptbox[mouse.screen].widget, f, nil, c) end
end

dropdown_on = true
globalkeys = awful.util.table.join(
		-- Generic
		awful.key({ Win,     }, "Menu",  function () mymainmenu:toggle() end),
		awful.key({ Win, Alt }, "Menu",  function () awful.menu.clients({keygrabber=true}) end),
		awful.key({ Win, Ctr }, "r",     awesome.restart),
		awful.key({ Win, Ctr }, "q",	 awesome.quit),

		-- Tag navegation
		awful.key({ Win,     }, "Left",  awful.tag.viewprev ),
		awful.key({ Win,     }, "Right", awful.tag.viewnext ),
		awful.key({ Win,     }, "\\",    awful.tag.history.restore ),
		awful.key({ Win,     }, "Tab",   awful.tag.viewnext ),
		awful.key({ Win, Shi }, "Tab",   awful.tag.viewprev ),
		awful.key({ Win,     }, "Up",    function () awful.screen.focus_relative( 1) end),
		awful.key({ Win,     }, "Down",  function () awful.screen.focus_relative(-1) end),
		awful.key({ Win,     }, "<",     function () awful.screen.focus_relative( 1) end),
		awful.key({ Win, Shi }, "<",     function () awful.screen.focus_relative(-1) end),

		-- Layout navegation
		awful.key({ Win,     }, "u",     awful.client.urgent.jumpto ),
		awful.key({ Alt      }, "\\",
						function ()
							awful.client.focus.history.previous()
							if client.focus then client.focus:raise() end
						end),
		awful.key({ Alt      }, "Tab",
						function ()
							awful.client.focus.byidx(1)
							if client.focus then client.focus:raise() end
						end),
		awful.key({ Alt, Shi }, "Tab",
						function ()
							awful.client.focus.byidx(-1)
							if client.focus then client.focus:raise() end
						end),

		-- Layout manipulation
		awful.key({ Win, Alt }, "Left",  function () awful.tag.incnmaster( 1)      end),
		awful.key({ Win, Alt }, "Right", function () awful.tag.incnmaster(-1)      end),
		awful.key({ Win, Alt }, "Up",    function () awful.client.swap.byidx( 1)   end),
		awful.key({ Win, Alt }, "Down",  function () awful.client.swap.byidx(-1)   end),
		awful.key({ Win, Ctr }, "Left",  function () awful.tag.incmwfact(-0.05)    end),
		awful.key({ Win, Ctr }, "Right", function () awful.tag.incmwfact( 0.05)    end),
		awful.key({ Win, Ctr }, "Up",    function () awful.tag.incncol( 1)         end),
		awful.key({ Win, Ctr }, "Down",  function () awful.tag.incncol(-1)         end),
		awful.key({ Win,     }, "space", function () awful.layout.inc(layouts,  1) end),
		awful.key({ Win, Shi }, "space", function () awful.layout.inc(layouts, -1) end),

		-- Apps
		awful.key({ Win }, "Return",               function () awful.util.spawn(terminal) end),
		awful.key({     }, "Print",                function () awful.util.spawn("/home/aparicio/scripts/screenshot scr") end),
		awful.key({ Ctr }, "Print",                function () awful.util.spawn("/home/aparicio/scripts/screenshot area") end),
		awful.key({     }, "XF86WWW",              function () awful.util.spawn("firefox") end),
		awful.key({     }, "XF86Favorites",        function () awful.util.spawn("xset dpms force off") end),
		awful.key({     }, "XF86AudioMute",        function () togglemute() end),
		awful.key({     }, "XF86AudioRaiseVolume", function () volume("1+") end),
		awful.key({     }, "XF86AudioLowerVolume", function () volume("1-") end),
		awful.key({     }, "XF86AudioPlay",	function () 
								if normalize_volume then
									awful.util.spawn_with_shell("amixer set Master 50% && mpc toggle")
								else
									awful.util.spawn("mpc toggle")
								end
							end),
		awful.key({     }, "XF86AudioStop",        function () awful.util.spawn("mpc stop") end),
		awful.key({     }, "XF86AudioPrev",        function () awful.util.spawn("mpc prev") end),
		awful.key({     }, "XF86AudioNext",        function () awful.util.spawn("mpc next") end),
		awful.key({     }, "XF86MonBrightnessUp",  function () awful.util.spawn("xbacklight +10") end),
		awful.key({     }, "XF86MonBrightnessDown",function () awful.util.spawn("xbacklight -10") end),
		awful.key({ Win }, "F1",                   function() dropdown_onoff() end),

		-- Prompts
		awful.key({ Win      }, "r",	function () mypromptbox[mouse.screen]:run() end ),
		awful.key({ Win      }, "x",	mkprompt("Lua: ",  awful.util.eval, awful.util.getdir("cache") .. "/history_eval") ),
		awful.key({ Win      }, "F11",	mkprompt("Calc: ", function (expr) out("= " .. awful.util.eval("return (" .. expr .. ")")) end ) ),
		awful.key({ Win      }, "u",	mkprompt("Uzbl: ", function (expr) spawn_ontop("uzbl-browser "..expr) end) ),
		awful.key({ Win      }, "k",	mkprompt("Wiki: ", function (expr) spawn_ontop("uzbl-browser http://en.wikipedia.org/w/index.php?title=Special:Search&search="..expr.."&go=Go") end) )
)

--------------------------------------- Client key bindings --------------------------------------- 
clientkeys = awful.util.table.join(
		awful.key({ Alt      }, "F4",     function (c) c:kill() end),
		awful.key({ Win,     }, "f",      function (c) c.fullscreen = not c.fullscreen end),
		awful.key({ Win, Alt }, "space",  awful.client.floating.toggle ),
		awful.key({ Win, Alt }, "Return", function (c) c:swap(awful.client.getmaster()) end),
		awful.key({ Win,     }, "o",      awful.client.movetoscreen ),
		awful.key({ Win, Alt }, "r",      function (c) c:redraw() end),
		awful.key({ Win,     }, "t",      function (c) c.ontop = not c.ontop end),
		awful.key({ Win,     }, "n",      function (c) c.minimized = not c.minimized end),
		awful.key({ Win, Shi }, "Right",
			function (c)
				awful.client.movetotag(tags[client.focus.screen][awful.tag.getidx(awful.tag.selected(mouse.screen))+1])
				awful.tag.viewnext()
			end),
		awful.key({ Win, Shi }, "Left",
			function (c)
				awful.client.movetotag(tags[client.focus.screen][awful.tag.getidx(awful.tag.selected(mouse.screen))-1])
				awful.tag.viewprev()
			end),
		awful.key({ Win,     }, "m",
			function (c)
				c.maximized_horizontal = not c.maximized_horizontal
				c.maximized_vertical   = not c.maximized_vertical
			end)
)

--------------------------------------- Numeric Tag Switching --------------------------------------- 
keynumber = 0
for s = 1, screen.count() do
	keynumber = math.min(9, math.max(#tags[s], keynumber));
end

for i = 1, keynumber do
	globalkeys = awful.util.table.join(globalkeys,
			awful.key({ Win }, "#" .. i + 9,
				function ()
					local screen = mouse.screen
					if tags[screen][i] then
						awful.tag.viewonly(tags[screen][i])
					end
				end),
			awful.key({ Win, Ctr }, "#" .. i + 9,
				function ()
					local screen = mouse.screen
					if tags[screen][i] then
						awful.tag.viewtoggle(tags[screen][i])
					end
				end),
			awful.key({ Win, Shi }, "#" .. i + 9,
				function ()
					if client.focus and tags[client.focus.screen][i] then
						awful.client.movetotag(tags[client.focus.screen][i])
					end
				end),
			awful.key({ Win, Alt }, "#" .. i + 9,
				function ()
					if client.focus and tags[client.focus.screen][i] then
						awful.client.toggletag(tags[client.focus.screen][i])
					end
				end))
end

--------------------------------------- Dynamic key bindings --------------------------------------- 
globalkeys = awful.util.table.join(globalkeys,
	awful.key({ }, "F1", function () dropdown_toggle(1) end),
	awful.key({ }, "F2", function () dropdown_toggle(2) end))

root.keys(globalkeys)

--------------------------------------- Client mouse actions --------------------------------------- 
clientbuttons = awful.util.table.join(
		awful.button({     }, 1, function (c) client.focus = c; c:raise() end),
		awful.button({ Win }, 1, awful.mouse.client.move),
		awful.button({ Win }, 2, function (c) c:kill() end),
		awful.button({ Win }, 3, awful.mouse.client.resize),
		awful.button({ Win }, 4, awful.tag.viewnext),
		awful.button({ Win }, 5, awful.tag.viewprev))

--------------------------------------- Rules --------------------------------------- 
awful.rules.rules = {
	-- All clients will match this rule.
	{ rule = { }, properties = { border_width = beautiful.border_width,
					   border_color = beautiful.border_normal,
					   focus = true,
					   keys = clientkeys,
					   buttons = clientbuttons,
					   size_hints_honor = false} },
	{ rule = { class = "MPlayer" },      properties = { floating = true } },
	{ rule = { class = "pinentry" },     properties = { floating = true } },
	{ rule = { class = "gimp" },         properties = { floating = true } },
	{ rule = { class = "Gmpc" },         properties = { floating = true } },
	{ rule = { class = "Transmission" }, properties = { floating = true } },
	{ rule = { class = "xpad" },         properties = { floating = true } },
	{ rule = { class = "Gsimplecal" },   properties = { floating = true }, callback = awful.placement.no_overlap },
	{ rule = { class = "Uzbl" },    properties = { tag = tags[1][2], focus = false, lower = true} },
	-- Set Firefox to always map on tags number 2 of screen 1.
		-- { rule = { class = "Firefox" },
			--   properties = { tag = tags[1][2] } },
}

--------------------------------------- Signals --------------------------------------- 
client.add_signal("manage",
	function (c, startup)
		-- awful.titlebar.add(c, { Win = Win })

		-- Enable sloppy focus
		--[[c:add_signal("mouse::enter",
						function(c)
							if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier and awful.client.focus.filter(c) then
								client.focus = c
							end
						end)]]

		if not startup then
			-- Set the windows at the slave,
			-- i.e. put it at the end of others instead of setting it master.
			-- awful.client.setslave(c)

			-- Put windows in a smart way, only if they does not set an initial position.
			if not c.size_hints.user_position and not c.size_hints.program_position then
				awful.placement.no_overlap(c)
				awful.placement.no_offscreen(c)
				end
			end
end )

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

--------------------------------------- Dropdown console --------------------------------------- 
function dropdown_onoff()
	out("Drop")
	if dropdown_on then
		out("Off")
		table.remove(globalkeys)
		table.remove(globalkeys)
		table.remove(globalkeys)
		table.remove(globalkeys)
		table.remove(globalkeys)
		table.remove(globalkeys)
		dropdown_on = false
	else
		out("On")
		globalkeys = awful.util.table.join(globalkeys,
			awful.key({     }, "F1", function () dropdown_toggle(1) end ),
			awful.key({     }, "F2", function () dropdown_toggle(2) end ))
		dropdown_on = true
	end
	root.keys(globalkeys)
end

dropdown = {}
function dropdown_toggle(n)
	prog = "/home/aparicio/scripts/uterm"
	local s = mouse.screen

	if not dropdown[n] then

		client.add_signal("unmanage",
			function (c)
				if dropdown[n] == c then
				dropdown[n] = nil
				end
			end )

		spawnw = function (c)
				dropdown[n] = c
				awful.client.floating.set(c, true)
				screengeom = screen[s].workarea

				if n == 1 then
					c:geometry({
						width = 800,
						height = 300,
						x = screengeom.x + (screengeom.width - c:geometry().width)/2,
						y = screengeom.y
					})
				else
					c:geometry({
						width = 800,
						height = 300,
						x = screengeom.x + (screengeom.width - c:geometry().width)/2,
						y =  screengeom.y + screengeom.height - c:geometry().height
					})
				end

				-- Mark terminal as ontop
				c.ontop = true
				c.above = true
				c.sticky = true
				c.skip_taskbar = true

				c:raise()
				client.focus = c

				client.remove_signal("manage", spawnw)
			end

		client.add_signal("manage", spawnw)
		awful.util.spawn(prog)
	else
		local c = dropdown[n]
		awful.client.movetotag(awful.tag.selected(s), c)

		if c.hidden then
			screengeom = screen[s].workarea
			if n == 1 then
				c:geometry({
					x = screengeom.x + (screengeom.width - c:geometry().width)/2,
					y = screengeom.y
				})
			else
				c:geometry({
					x = screengeom.x + (screengeom.width - c:geometry().width)/2,
					y =  screengeom.y + screengeom.height - c:geometry().height
				})
			end
			c.hidden = false
			c:raise()
			client.focus = c
		else
			c.hidden = true
		end
	end
end

